AWSTemplateFormatVersion: '2010-09-09'

Description: gitlab ee linux ec2 auto scaling group

Parameters:
  keyName:
    Description: Key pair to use for instances
    Type: String

  vpcStackName:
    Description: Name of the vpc stack in which to deploy the cluster
    Type: String

  stackName:
    Description: Name of the stack to distinguish it from other stacks
    Type: String

  instanceType:
    Description: ec2 instance type
    Type: String

  multiAZ:
    Description: Flag for multi AZ environment
    AllowedValues:
      - "True"
      - "False"
    Type: String
    Default: "False"

#  configureScript:
#    Description: S3 URL for the Install Scripts
#    Type: String

  s3BuildBucket:
    Description: S3 Bucket for deployment resources
    Type: String

  scaleUpSchedule:
    Description: Cron expression for scheduled scale UP action
    Type: String

  scaleDownSchedule:
    Description: Cron expression for scheduled scale DOWN action
    Type: String

  ec2Image:
    Description: AMI for the ec2 instance
    Type: String

  rdsUsername:
    Description: username for the rds instance
    Type: String

  rdsPassword:
    Description: password for the rds instance
    Type: String

  rdsEndpointPort:
    Description: endpoint port for the rds instance
    Type: String

  rdsEndpointAddress:
    Description: endpoint address for the rds instance
    Type: String



Mappings:
  "multiAZ":
    "True":
      minInstancesInService: 2
      maxInstancesInService: 4
    "False":
      minInstancesInService: 1
      maxInstancesInService: 4

Resources:
  ec2VMUpdateWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  eC2VMUpdateWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: autoScalingGroup
    Properties:
      Handle: !Ref ec2VMUpdateWaitHandle
      Timeout: '2400'

############################ Load Balancer ######################################
  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Name: !Join [ "-", [ !Ref stackName, "alb" ]]
      Scheme: internet-facing
      Subnets:
#        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "private-subnet1" ]]
#        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "private-subnet2" ]]
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "public-subnet1" ]]
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "public-subnet2" ]]
      SecurityGroups:
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "webtraffic-securitygroup" ]]
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref stackName, "alb" ]]
        - Key: ProductComponents
          Value: alb

############################ Target Group ######################################
  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /index.html
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: !Join [ "-", [ !Ref stackName, "tgt", "grp" ]]
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref stackName, "tgt", "grp" ]]
        - Key: ProductComponents
          Value: targetgroup
      TargetType: instance
      VpcId:
        Fn::ImportValue: !Ref vpcStackName

############################ ALB Listener ######################################
  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 80
      Protocol: HTTP

  ssmInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ssmRole

  ssmRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetDocument'
                  - 'ssm:GetParameters'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstanceStatus'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ds:CreateComputer'
                  - 'ds:DescribeDirectories'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:Get*'
                  - 's3:List*'
                  - 's3:AbortMultipartUpload'
                  - 's3:ListMultipartUploadParts'
                  - 's3:ListBucketMultipartUploads'
                Resource: '*'

  autoScalingLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ec2Image
      IamInstanceProfile: !Ref ssmInstanceProfile
      InstanceType: !Ref instanceType
      KeyName: !Ref keyName
      SecurityGroups:
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "internaltraffic-securitygroup" ]]
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "externalssh-securitygroup" ]]
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "webtraffic-securitygroup" ]]
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              # run init scripts
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackId'
            - '         --resource autoScalingGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  autoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Metadata:
      AWS::CloudFormation::Authentication:
        s3AccessCreds:
          type: S3
          roleName: !Ref ssmRole
          buckets:
            - !Ref s3BuildBucket
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.autoScalingGroup.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource autoScalingGroup --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: "root"
              group: "root"
            /usr/local/bin/init-update.sh:
              content: !Sub |
                #!/bin/bash
                sudo yum install â€“y epel-release
                sudo yum install -y jq
                sudo yum install -y python2
                sudo yum install -y python2-devel
                sudo yum install -y python2-pip

                sudo pip install psycopg2
                sudo pip install psycopg2-binary

                sudo yum clean all
                sudo yum -y update
              mode: "000755"
            /usr/local/bin/gitlab-install.sh:
              content: !Sub |
                #!/bin/bash
                # Source: https://about.gitlab.com/installation/#centos-6

                sudo yum install -y curl policycoreutils-python openssh-server cronie
                sudo yum install -y postfix
                sudo service postfix start
                sudo chkconfig postfix on

                curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash
                sudo EXTERNAL_URL="http://gitlab.snow-online.co.uk" yum -y install gitlab-ee

              mode: "000755"
            /usr/local/bin/init-database.py:
              content: !Sub |
                #!/usr/bin/python

                import psycopg2
                import datetime
                from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

                postgres_user = '${rdsUsername}'
                postgres_password = '${rdsPassword}'
                postgres_endpoint = '${rdsEndpointAddress}'

                newDbName = 'gitlab'
                newDbUser = 'gitlab_dbuser'
                newDbUserPassword = 'gitlab_password01'

                query_listCurrentSqlUsers = "SELECT usename FROM pg_catalog.pg_user WHERE usename = '%s';" % (newDbUser)
                query_createNewSqlUser = "CREATE USER %s WITH PASSWORD '%s';" % (newDbUser, newDbUserPassword)
                query_grantPermissions = "GRANT ALL PRIVILEGES ON DATABASE %s TO %s;" % (newDbName, newDbUser)

                query_listCurrentDbs = "SELECT datname FROM pg_database WHERE datistemplate = false AND datname = '%s';" % (newDbName)
                query_createDb = "CREATE DATABASE %s WITH OWNER = 'postgres' ENCODING = 'UTF8' CONNECTION LIMIT = -1;" % (newDbName)
                query_createTrgmExt = "CREATE EXTENSION pg_trgm;"

                # Connect to an existing database
                connection = psycopg2.connect("dbname='postgres' user=%s host=%s password=%s" % (postgres_user, postgres_endpoint, postgres_password))

                # Create cursor to perform database operations
                cursor = connection.cursor()



                ######## Check SQL users ###################################################
                # Check if user exists
                cursor.execute(query_listCurrentSqlUsers)
                if len(cursor.fetchall()) > 0:
                    print '[%s] - SQL User: %s already exists. Nothing to do...' % (datetime.datetime.utcnow(), newDbUser)
                else:
                    print '[%s] - SQL User: %s doesn\'t exist. Creating now...' % (datetime.datetime.utcnow(), newDbUser)
                    cursor.execute(query_createNewSqlUser)
                    connection.commit()

                ######## Check SQL database ###################################################
                # Check if database exists
                cursor.execute(query_listCurrentDbs)

                if len(cursor.fetchall()) > 0:
                    print '[%s] - Database: %s already exists, nothing to do.' % (datetime.datetime.utcnow(), newDbName)
                else:
                    print '[%s] - Will create new database: %s now...' % (datetime.datetime.utcnow(), newDbName)

                    # CREATE DATABASE can't be run into a transaction. Setting the isolation level to autocommit means no transaction is started
                    connection.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)

                    # Create the database
                    cursor.execute(query_createDb)
                    cursor.execut(query_createTrgmExt)


                ######## Grant permissions to new database ###################################################
                cursor.execute(query_grantPermissions)

                # Make the changes to the database persistent
                connection.commit()

                # Close communication with the database
                cursor.close()
                connection.close()

              mode: "000755"
            /usr/local/bin/gitlab-dbconfig:
              content: !Sub |
                #!/bin/bash
                postgresql['enable'] = false
                gitlab_rails['db_adapter'] = "postgresql"
                gitlab_rails['db_encoding'] = "utf8"
                gitlab_rails['db_database'] = "gitlab"
                gitlab_rails['db_username'] = "${rdsUsername}"
                gitlab_rails['db_password'] = "${rdsPassword}"
                gitlab_rails['db_host'] = "${rdsEndpointAddress}"

              mode: "000755"
          commands:
            001-script-start:
              command: "echo \"$(date) - 001-script-start\" | sudo tee --append /home/ec2-user/eddyCFN.log"
              waitAfterCompletion: '0'
            010-run-updates:
              command: "echo \"$(date) - 010-run-updates\" | sudo tee --append /home/ec2-user/eddyCFN.log && /usr/local/bin/init-update.sh"
              waitAfterCompletion: '0'
            020-init-database:
              command: "echo \"$(date) - 020-init-database\" | sudo tee --append /home/ec2-user/eddyCFN.log && /usr/local/bin/init-database.py"
              waitAfterCompletion: '0'
            030-run-gitlab-install:
              command: "echo \"$(date) - 030-run-gitlab-install\" | sudo tee --append /home/ec2-user/eddyCFN.log && /usr/local/bin/gitlab-install.sh && sudo cat /etc/gitlab/gitlab.rb > /etc/gitlab/gitlab.rb.bak"
              waitAfterCompletion: '0'
            031-run-gitlab-db-config:
              command: "echo \"$(date) - 031-run-gitlab-db-config\" | sudo tee --append /home/ec2-user/eddyCFN.log && sudo cat /etc/gitlab/gitlab.rb.bak > /etc/gitlab/gitlab.rb && cat /usr/local/bin/gitlab-dbconfig >> /etc/gitlab/gitlab.rb && sudo gitlab-ctl reconfigure"
              waitAfterCompletion: '0'
            999-signal-complete:
              command: !Join
                - ''
                - - '/opt/aws/bin/cfn-signal -e $? -r "call to 999-signal-complete" '
                  - !Base64
                    Ref: ec2VMUpdateWaitHandle
              ignoreErrors: true
              waitAfterCompletion: 0
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      AvailabilityZones:
        - !Select
          - '0'
          - !GetAZs ''
        - !Select
          - '1'
          - !GetAZs ''
      VPCZoneIdentifier:
# Place Instances into public subnet for now so I can SSH onto them easily. ES.
#        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "private-subnet1" ]]
#        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "private-subnet2" ]]
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "public-subnet1" ]]
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "public-subnet2" ]]
      LaunchConfigurationName: !Ref autoScalingLaunchConfig
      MinSize:
        Fn::FindInMap: [multiAZ, !Ref multiAZ, minInstancesInService]
      MaxSize:
        Fn::FindInMap: [multiAZ, !Ref multiAZ, maxInstancesInService]
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref stackName, "asg" ]]
          PropagateAtLaunch: 'true'

  scalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      Cooldown: '60'
      AutoScalingGroupName: !Ref autoScalingGroup
      ScalingAdjustment: 1

Outputs:
  loadBalancerCname:
    Description: CNAME for ALB
    Value:
      Fn::GetAtt: [ loadBalancer, DNSName ]
    Export:
      Name: !Join [ "-", [ !Ref stackName, "loadBalancerCname" ]]


