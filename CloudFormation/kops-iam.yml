AWSTemplateFormatVersion: 2010-09-09

Description: IAM Resources template for KOPS K8s deployment

Parameters:
  stackName:
    Description: Name of the stack to distinguish it from other stacks
    Type: String

  kopsGroupName:
    Description: Name of the KOPS group
    Type: String
    Default: eddy

  kopsUserName:
    Description: Name of the KOPS user
    Type: String
    Default: eddy

Resources:
  kopsGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: !Join [ "", [ !Ref kopsGroupName, ".group@", !Ref "AWS::Region" ]]

  kopsUser:
    Type: AWS::IAM:User
    Properties:
      UserName: !Join [ "", [ !Ref stackName, ".", !Ref kopsUserName, "@", !Ref "AWS::Region" ]]

  kopsUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref kopsUser

  kopsEc2FullAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join [ "", [ "kopsEc2FullAccess.policy@", !Ref "AWS::Region" ]]
      Groups:
        - !Ref kopsGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "ec2:*"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "elasticloadbalancing*"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "cloudwatch:*"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "autoscaling:*"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "iam:CreateServiceLinkedRole"
            Resource: "*"

  kopsIamFullAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join [ "", [ "kopsIamFullAccess.policy@", !Ref "AWS::Region" ]]
      Groups:
        - !Ref kopsGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "iam:*"
            Resource: "*"

  kopsS3FullAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join [ "", [ "kopsS3FullAccess.policy@", !Ref "AWS::Region" ]]
      Groups:
        - !Ref kopsGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:*"
            Resource: "*"

  kopsVpcFullAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join [ "", [ "kopsVpcFullAccess.policy@", !Ref "AWS::Region" ]]
      Groups:
        - !Ref kopsGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "ec2:AcceptVpcPeeringConnection"
              - "ec2:AcceptVpcEndpointConnections"
              - "ec2:AllocateAddress"
              - "ec2:AssignIpv6Addresses"
              - "ec2:AssignPrivateIpAddresses"
              - "ec2:AssociateAddress"
              - "ec2:AssociateDhcpOptions"
              - "ec2:AssociateRouteTable"
              - "ec2:AssociateSubnetCidrBlock"
              - "ec2:AssociateVpcCidrBlock"
              - "ec2:AttachClassicLinkVpc"
              - "ec2:AttachInternetGateway"
              - "ec2:AttachNetworkInterface"
              - "ec2:AttachVpnGateway"
              - "ec2:AuthorizeSecurityGroupEgress"
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ec2:CreateCustomerGateway"
              - "ec2:CreateDefaultSubnet"
              - "ec2:CreateDefaultVpc"
              - "ec2:CreateDhcpOptions"
              - "ec2:CreateEgressOnlyInternetGateway"
              - "ec2:CreateFlowLogs"
              - "ec2:CreateInternetGateway"
              - "ec2:CreateNatGateway"
              - "ec2:CreateNetworkAcl"
              - "ec2:CreateNetworkAcl"
              - "ec2:CreateNetworkAclEntry"
              - "ec2:CreateNetworkInterface"
              - "ec2:CreateNetworkInterfacePermission"
              - "ec2:CreateRoute"
              - "ec2:CreateRouteTable"
              - "ec2:CreateSecurityGroup"
              - "ec2:CreateSubnet"
              - "ec2:CreateTags"
              - "ec2:CreateVpc"
              - "ec2:CreateVpcEndpoint"
              - "ec2:CreateVpcEndpointConnectionNotification"
              - "ec2:CreateVpcEndpointServiceConfiguration"
              - "ec2:CreateVpcPeeringConnection"
              - "ec2:CreateVpnConnection"
              - "ec2:CreateVpnConnectionRoute"
              - "ec2:CreateVpnGateway"
              - "ec2:DeleteCustomerGateway"
              - "ec2:DeleteDhcpOptions"
              - "ec2:DeleteEgressOnlyInternetGateway"
              - "ec2:DeleteFlowLogs"
              - "ec2:DeleteInternetGateway"
              - "ec2:DeleteNatGateway"
              - "ec2:DeleteNetworkAcl"
              - "ec2:DeleteNetworkAclEntry"
              - "ec2:DeleteNetworkInterface"
              - "ec2:DeleteNetworkInterfacePermission"
              - "ec2:DeleteRoute"
              - "ec2:DeleteRouteTable"
              - "ec2:DeleteSecurityGroup"
              - "ec2:DeleteSubnet"
              - "ec2:DeleteTags"
              - "ec2:DeleteVpc"
              - "ec2:DeleteVpcEndpoints"
              - "ec2:DeleteVpcEndpointConnectionNotifications"
              - "ec2:DeleteVpcEndpointServiceConfigurations"
              - "ec2:DeleteVpcPeeringConnection"
              - "ec2:DeleteVpnConnection"
              - "ec2:DeleteVpnConnectionRoute"
              - "ec2:DeleteVpnGateway"
              - "ec2:DescribeAccountAttributes"
              - "ec2:DescribeAddresses"
              - "ec2:DescribeAvailabilityZones"
              - "ec2:DescribeClassicLinkInstances"
              - "ec2:DescribeCustomerGateways"
              - "ec2:DescribeDhcpOptions"
              - "ec2:DescribeEgressOnlyInternetGateways"
              - "ec2:DescribeFlowLogs"
              - "ec2:DescribeInstances"
              - "ec2:DescribeInternetGateways"
              - "ec2:DescribeKeyPairs"
              - "ec2:DescribeMovingAddresses"
              - "ec2:DescribeNatGateways"
              - "ec2:DescribeNetworkAcls"
              - "ec2:DescribeNetworkInterfaceAttribute"
              - "ec2:DescribeNetworkInterfacePermissions"
              - "ec2:DescribeNetworkInterfaces"
              - "ec2:DescribePrefixLists"
              - "ec2:DescribeRouteTables"
              - "ec2:DescribeSecurityGroupReferences"
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeStaleSecurityGroups"
              - "ec2:DescribeSubnets"
              - "ec2:DescribeTags"
              - "ec2:DescribeVpcAttribute"
              - "ec2:DescribeVpcClassicLink"
              - "ec2:DescribeVpcClassicLinkDnsSupport"
              - "ec2:DescribeVpcEndpointConnectionNotifications"
              - "ec2:DescribeVpcEndpointConnections"
              - "ec2:DescribeVpcEndpoints"
              - "ec2:DescribeVpcEndpointServiceConfigurations"
              - "ec2:DescribeVpcEndpointServicePermissions"
              - "ec2:DescribeVpcEndpointServices"
              - "ec2:DescribeVpcPeeringConnections"
              - "ec2:DescribeVpcs"
              - "ec2:DescribeVpnConnections"
              - "ec2:DescribeVpnGateways"
              - "ec2:DetachClassicLinkVpc"
              - "ec2:DetachInternetGateway"
              - "ec2:DetachNetworkInterface"
              - "ec2:DetachVpnGateway"
              - "ec2:DisableVgwRoutePropagation"
              - "ec2:DisableVpcClassicLink"
              - "ec2:DisableVpcClassicLinkDnsSupport"
              - "ec2:DisassociateAddress"
              - "ec2:DisassociateRouteTable"
              - "ec2:DisassociateSubnetCidrBlock"
              - "ec2:DisassociateVpcCidrBlock"
              - "ec2:EnableVgwRoutePropagation"
              - "ec2:EnableVpcClassicLink"
              - "ec2:EnableVpcClassicLinkDnsSupport"
              - "ec2:ModifyNetworkInterfaceAttribute"
              - "ec2:ModifySubnetAttribute"
              - "ec2:ModifyVpcAttribute"
              - "ec2:ModifyVpcEndpoint"
              - "ec2:ModifyVpcEndpointConnectionNotification"
              - "ec2:ModifyVpcEndpointServiceConfiguration"
              - "ec2:ModifyVpcEndpointServicePermissions"
              - "ec2:ModifyVpcPeeringConnectionOptions"
              - "ec2:ModifyVpcTenancy"
              - "ec2:MoveAddressToVpc"
              - "ec2:RejectVpcEndpointConnections"
              - "ec2:RejectVpcPeeringConnection"
              - "ec2:ReleaseAddress"
              - "ec2:ReplaceNetworkAclAssociation"
              - "ec2:ReplaceNetworkAclEntry"
              - "ec2:ReplaceRoute"
              - "ec2:ReplaceRouteTableAssociation"
              - "ec2:ResetNetworkInterfaceAttribute"
              - "ec2:RestoreAddressToClassic"
              - "ec2:RevokeSecurityGroupEgress"
              - "ec2:RevokeSecurityGroupIngress"
              - "ec2:UnassignIpv6Addresses"
              - "ec2:UnassignPrivateIpAddresses"
              - "ec2:UpdateSecurityGroupRuleDescriptionsEgress"
              - "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
            Resource: "*"

  kopsRoute53FullAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join [ "", [ "kopsRoute53FullAccess.policy@", !Ref "AWS::Region" ]]
      Groups:
        - !Ref kopsGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "route53:*"
              - "route53domains:*"
              - "cloudfront:ListDistributions"
              - "elasticloadbalancing:DescribeLoadBalancers"
              - "elasticbeanstalk:DescribeEnvironments"
              - "s3:ListBucket"
              - "s3:GetBucketLocation"
              - "s3:GetBucketWebsite"
              - "ec2:DescribeVpcs"
              - "ec2:DescribeRegions"
              - "sns:ListTopics"
              - "sns:ListSubscriptionsByTopic"
              - "cloudwatch:DescribeAlarms"
              - "cloudwatch:GetMetricStatistics"
            Resource: "*"

Outputs:
  kopsUserAccessKey:
    Description: Access key for the user
    Value: !Ref kopsUserAccessKey
    Export:
      Name: !Join [ "-", [ !Ref stackName, "kopsUserAccessKey" ]]

  kopsUserSecretKey:
    Description: Secret key for the user
    Value: !GetAtt kopsUserSecretKey.SecretAccessKey
    Export:
      Name: !Join [ "-", [ !Ref stackName, "kopsUserSecretKey" ]]
